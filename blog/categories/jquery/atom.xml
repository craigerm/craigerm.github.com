<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jquery | all things craig]]></title>
  <link href="http://allthingscraig.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://allthingscraig.com/"/>
  <updated>2018-03-15T14:56:38-04:00</updated>
  <id>http://allthingscraig.com/</id>
  <author>
    <name><![CDATA[Craig MacGregor]]></name>
    <email><![CDATA[craigerm@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing jQuery Plugin Internals]]></title>
    <link href="http://allthingscraig.com/blog/2012/12/23/unit-testing-jquery-plugin-internals/"/>
    <updated>2012-12-23T09:11:22-05:00</updated>
    <id>http://allthingscraig.com/blog/2012/12/23/unit-testing-jquery-plugin-internals</id>
    <content type="html"><![CDATA[<p>Anyone who has worked with me before knows that I am a big advocate of TDD. I find when I start with TDD it's often hard to move away from it and conversely if I don't start with it it's hard to move towards it later.</p>

<p>Lately I've been writing several jQuery plugins - both simple and complex. One in particular was a calculation plugin that had dozens of complicated calculations and edge cases. So let's see how I would go about writing a jQuery plugin using TDD and <a href="http://pivotal.github.com/jasmine/">jasmine</a> as the testing framework for a simplified calculator plugin.</p>

<h2>Writing a test</h2>

<p>Let's say we need a function that checks if a number is even. So let's write the test:</p>

<p>```javascript
describe('calculator', function() {
  describe('isEven()', function() {</p>

<pre><code>// What should our test look like ?
</code></pre>

<p>   it('should return true for even numbers', function() {</p>

<pre><code> // #1 Add to global namespace?
 expect(window.isEven(2)).toBe(true);

 // #2 Add to jQuery namespace?
 expect($.isEven(2)).toBe(true);

 // #3 Make plugin add a static jQuery object that has the methods we need
 expect($.calculator.isEven(2)).toBe(true);

 // #4 ??
</code></pre>

<p>   });
  });
});
```</p>

<h2>Create plugin</h2>

<p>We use this standard format for a jQuery plugin:</p>

<p>```javascript
(function($) {
  $.fn.calculator = function() {</p>

<pre><code> return this.each(function() {
   // code
 });
</code></pre>

<p>  };
})(jQuery);
```</p>

<h2>Requirements</h2>

<p>So what exactly do we want this to look like? Well there are some simple requirements I like to have.</p>

<ol>
<li>Each plugin should not add anything to the global (window) object (This rules out #1)</li>
<li>Each plugin should only add one object or function to the jQuery namespace (This rules out #2 and #3)</li>
<li>Easily make new functions testable</li>
</ol>


<p>So that just leaves #4. But what could that be.</p>

<h2>Using a global object for tests</h2>

<p>The first approach I tried was creating a global object (I know, I know...) before the script was included and add the methods to this object. So let's write what our test body should look like:</p>

<p><code>javascript
  it('should return true for even numbers', function() {
   expect(container.isEven(2)).toBe(true);
  });
</code></p>

<p>We would change our html test runner to look something like:</p>

<p>```html</p>

<script type="text/javascript">
  var container = {}; // adds to global namespace
</script>




<script type="text/javascript" src="calculator.plugin.js"></script>


<p>```</p>

<p>And our plugin now looks like this:
```javascript
(function($, container) {
  container = {}</p>

<p>  var isEven = container.isEven = function(num) {</p>

<pre><code>return num % 2 == 0;
</code></pre>

<p>  };</p>

<p>  $.fn.calculator = function() {</p>

<pre><code>return this.each(function() {
  // code
});
</code></pre>

<p>  };
})(jQuery, container);
```</p>

<p>So what exactly is happening here? Well our unit test is using a global variable to access the internal functions of the jQuery plugin. Next we declare this variable in our test runner so we can access it, but for usage in our application this variable won't exist. Finally our plugin assigns whatever functions we need to this object. There's still the problem of possibly having a conflict with the global variable - just one reason why global variables are bad and should be avoided.</p>

<h2>Using the plugins jQuery's data object to store internal functions</h2>

<p>A second approach is to utilize the jQuery data object:</p>

<p>```javascript
(function($) {
  var internals = {}</p>

<p>  var isEven = internals.isEven = function(num) {</p>

<pre><code>return num % 2 == 0;
</code></pre>

<p>  };</p>

<p>  $.fn.calculator = function() {</p>

<pre><code>return this.each(function() {
  // code

  // Add internal methods to do data
 $(this).data('internals', internals);
</code></pre>

<p>   });
  };
})(jQuery);
```</p>

<p>Our test body would now look like:
```javascript
  var internals = $('#fakeId').calculator().data('internals');</p>

<p>  it('should return true for even numbers', function() {</p>

<pre><code>expect(internals.isEven(2)).toBe(true);
</code></pre>

<p>  });
```</p>

<p>This approach meets our requirements and doesn't utilize a global variable for testing purposes. You can make the argument that if a plugin doesn't expose the method it does not need to be tested. I don't fully agree with this because the usage of the plugin API could be considered more of an integration test since we are integrating with our client code (i.e. the HTML page). Sometimes plugins contain logic that should be fully unit testable because there are complicated cases. In this case we are adding an extra step in the plugin but I think the benefits outweigh the overhead.</p>

<h2>Returning internals as an option to the plugin</h2>

<p>Alternatively instead of adding to each object's data (not a good idea if plugin is used for several elements on a page) we can do something similar by passing in a string to the plugin that would return the object instead of using the data object. This is the approach I am currently using on a few plugins:</p>

<p>```javascript
(function($) {
  var internals = {}</p>

<p>  var isEven = internals.isEven = function(num) {</p>

<pre><code>return num % 2 == 0;
</code></pre>

<p>  };</p>

<p>  $.fn.calculator = function(option) {</p>

<pre><code>if(option === 'internals') { 
   return internals;
}
// you could simplify this and add options for each method if you prefer like this:
// if(option === 'isEven') return isEven;

return this.each(function() {
  // code
</code></pre>

<p>   });
  };
})(jQuery);</p>

<p>  // Test body would be this:
  var internals = $('#fakeId').calculator('internals');</p>

<p>  it('should return true for even numbers', function() {</p>

<pre><code>expect(internals.isEven(2)).toBe(true);
</code></pre>

<p>  });
```</p>

<h2>More complicated approach</h2>

<p>In larger plugins it might be better to use a CLI tool to build the plugin so that we don't have the anonymous function wrapper included when testing. For example the jQuery source does something like this. The have an intro file, several body files, and an outro file.</p>

<p>The intro.js file looks like:</p>

<p><code>javascript
(function( window, undefined ) {
  "use strict";
</code></p>

<p>And here's the outro.js file:</p>

<p><code>javascript
  })( window );
</code></p>

<p>They get appended together to build the jQuery source that we know and love. It's a very useful technique if you're building a larger plugin or framework.</p>

<h2>Conclusion</h2>

<p>As with anything there's so silver bullet. I'm still not completely sure this is the cleanest approach to testing these internal methods, but I'm liking it so far. Allowing access to the internal functions in my unit tests without cluttering up the global window object gives me the flexibility I need to use a complete TDD approach to building jQuery plugins.</p>

<p>If you have any other ways of doing this I would love to hear about them! Happy Coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Practice: Appending items to the DOM using jQuery]]></title>
    <link href="http://allthingscraig.com/blog/2012/09/28/best-practice-appending-items-to-the-dom-using-jquery/"/>
    <updated>2012-09-28T13:55:54-04:00</updated>
    <id>http://allthingscraig.com/blog/2012/09/28/best-practice-appending-items-to-the-dom-using-jquery</id>
    <content type="html"><![CDATA[<p>We've all heard this before:</p>

<blockquote><p>Dom manipulation is expensive!</p></blockquote>

<p>But very often you need to update a list item, select list or some other element with many child items(possibly hundreds...).</p>

<p>So what's the best approach for doing this?</p>

<p>Well first let's show the most common approach that we have all see many times and benchmark a few others.</p>

<p><em>(For the sake of these benchmarks I am using Chrome with Ubuntu and testing at <a href="http://jsperf.com">jsperf</a>)</em></p>

<h2>1) Naive Approach: Manually adding to the element directly that is already in the dom</h2>

<p>```javascript
var element = $('ul:first');</p>

<p>for(var i=0; i &lt; 100; i++){
  element.append('<li>' + i + '</li>');
}
```</p>

<p><em>Result: 281 operations/second</em></p>

<p>Manually appending lots of items to the DOM is usually a bad idea.
It can cause the browser to repaint the UI which is an expensive operation when the DOM is large.</p>

<h2>2) Better Approach - Make changes in memory</h2>

<p>Instead of adding items directly to the element in the DOM we can create a stub element in memory and append to that instead. After we are done with the appends we just need to make one call to the DOM to perform the update.</p>

<p>```javascript
var element = $('ul:first');</p>

<p>var stub = $('<ul>');</p>

<p>for(var i=0; i &lt; 100; i++){
  stub.append('<li>' + i + '</li>');
}
element.append(stub.children());
```</p>

<p><em>Result: 276 operations/second</em></p>

<p>I do believe this result is a result is a little skewed. The DOM I was testing with was quite small and not the size that adding items would make a huge difference. This is something worth noting though because an optimization's value is highly application specific.</p>

<h2>3) Fastest Approach - Use a string buffer and append html string directly</h2>

<p>Usually I am happy using the in-memory approach because I know that if you have a large DOM loaded it will minimize the direct updates needed
and hopefully result in better performance. And if the dom is small it's only marginally slower so I usually caution on the side of err.</p>

<p>But can we make it faster? Well let's try.</p>

<p>Instead of creating a stub we will just store the html string for each element in an array. This removes the overhead of string concatenation (which is bad of course :)) and the overhead of creating many temporary jQuery elements. When we are finished we will join the items in the array with an empty string and append it to the list item.</p>

<p>Now, the fun stuff. Let's see this in action...</p>

<p>```javascript
var element = $('ul:first');
var arr = [];</p>

<p>for(var i=0; i &lt; 100; i++){
  arr.push('<li>');
  arr.push(i)
  arr.push('</li>');
}
element.append(arr.join(''));
```</p>

<p><em>Result: 1,150 operations/second</em></p>

<p>Woah! That's a huge improvement! Granted some of that improvement is because we removed the string concatenation - but it shows you that a few small changes can make a big difference!</p>

<h2>Final Thoughts</h2>

<p>So there you have it! As a general rule when performing lots of appends to an item it is usually a good idea to not manipulate the DOM directly. And if you want to increase the performance and responsiveness out of you web app  when doing DOM manipulation try using the array string buffer technique.</p>

<p>{% img /images/posts/append-benchmark.png %}</p>

<p>If you have a faster way of doing this, please share! :)</p>
]]></content>
  </entry>
  
</feed>
